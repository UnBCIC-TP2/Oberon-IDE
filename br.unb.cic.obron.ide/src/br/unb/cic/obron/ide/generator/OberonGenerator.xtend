/*
 * generated by Xtext 2.25.0
 */
package br.unb.cic.obron.ide.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import java.nio.file.Paths
import java.nio.file.Files
import br.unb.cic.oberon.parser.ScalaParser
import br.unb.cic.oberon.codegen.PaigesBasedGenerator
import br.unb.cic.oberon.tc.TypeChecker
import scala.collection.immutable.List
import scala.Tuple2
import br.unb.cic.oberon.ast.Statement
import br.unb.cic.oberon.interpreter.Interpreter

class OberonGenerator extends AbstractGenerator {
	
   /**
 	* Generates the C code from an Oberon module.  
 	*/
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if(resource.URI.isPlatform) {
			val file = ResourcesPlugin.workspace.root.getFile(new Path(resource.URI.toPlatformString(true))).rawLocation.toOSString;
			val path = Paths.get(file)			
			val content = String.join("\n", Files.readAllLines(path))
			val module = ScalaParser.parse(content)
			val codeGenerator = new PaigesBasedGenerator(3)	
			
			fsa.generateFile(path.fileName.toString.replace(".oberon", ".c"), codeGenerator.generateCode(module))
								
		}
	}
	
	
	/**
	 * Executes the type checker on a Oberon module. 
	 * 
	 * @arg content The string content of an Oberon module.   
	 */
	def List<Tuple2<Statement, String>> typeChecker(String content) {
		val module = ScalaParser.parse(content)
		val tc = new TypeChecker() 
		
		return tc.visit(module)
	}
	
	/**
	 * Executes the interpreter on a Oberon module. 
	 * 
	 * @arg content The string content of an Oberon module.   
	 */
	
	def void interpreter (String content) {
		val module = ScalaParser.parse(content)
		val i = new Interpreter()
		i.visit(module)	
		
	}
}

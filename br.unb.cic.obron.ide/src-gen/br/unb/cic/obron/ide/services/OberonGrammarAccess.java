/*
 * generated by Xtext 2.25.0
 */
package br.unb.cic.obron.ide.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OberonGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OberonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Oberon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationDeclarationsParserRuleCall_3_0 = (RuleCall)cDeclarationAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Oberon:
		//  'MODULE' name = ID ';' declaration = Declarations block=Block ? 'END' ID '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'MODULE' name = ID ';' declaration = Declarations block=Block ? 'END' ID '.'
		public Group getGroup() { return cGroup; }
		
		//'MODULE'
		public Keyword getMODULEKeyword_0() { return cMODULEKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//declaration = Declarations
		public Assignment getDeclarationAssignment_3() { return cDeclarationAssignment_3; }
		
		//Declarations
		public RuleCall getDeclarationDeclarationsParserRuleCall_3_0() { return cDeclarationDeclarationsParserRuleCall_3_0; }
		
		//block=Block ?
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
		
		//'END'
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_6() { return cIDTerminalRuleCall_6; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBEGINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtStatementParserRuleCall_2_0 = (RuleCall)cStmtAssignment_2.eContents().get(0);
		private final Keyword cENDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//    {Block}
		//    'BEGIN' (stmt += Statement)*  'END';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}
		//'BEGIN' (stmt += Statement)*  'END'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'BEGIN'
		public Keyword getBEGINKeyword_1() { return cBEGINKeyword_1; }
		
		//(stmt += Statement)*
		public Assignment getStmtAssignment_2() { return cStmtAssignment_2; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_2_0() { return cStmtStatementParserRuleCall_2_0; }
		
		//'END'
		public Keyword getENDKeyword_3() { return cENDKeyword_3; }
	}
	public class DeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Declarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclararionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTYPEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesUserTypeDeclarationParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCONSTKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstsConstantParserRuleCall_2_1_0 = (RuleCall)cConstsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVARKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarsVarDeclarationParserRuleCall_3_1_0 = (RuleCall)cVarsAssignment_3_1.eContents().get(0);
		private final Assignment cProcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcProcedureParserRuleCall_4_0 = (RuleCall)cProcAssignment_4.eContents().get(0);
		
		//Declarations:
		//    {Declararion}
		//    ('TYPE' types += UserTypeDeclaration+) ?
		//    ('CONST' consts += Constant+) ?
		//    ('VAR' vars += VarDeclaration+) ?
		//    (proc += Procedure)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Declararion}
		//('TYPE' types += UserTypeDeclaration+) ?
		//('CONST' consts += Constant+) ?
		//('VAR' vars += VarDeclaration+) ?
		//(proc += Procedure)*
		public Group getGroup() { return cGroup; }
		
		//{Declararion}
		public Action getDeclararionAction_0() { return cDeclararionAction_0; }
		
		//('TYPE' types += UserTypeDeclaration+) ?
		public Group getGroup_1() { return cGroup_1; }
		
		//'TYPE'
		public Keyword getTYPEKeyword_1_0() { return cTYPEKeyword_1_0; }
		
		//types += UserTypeDeclaration+
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }
		
		//UserTypeDeclaration
		public RuleCall getTypesUserTypeDeclarationParserRuleCall_1_1_0() { return cTypesUserTypeDeclarationParserRuleCall_1_1_0; }
		
		//('CONST' consts += Constant+) ?
		public Group getGroup_2() { return cGroup_2; }
		
		//'CONST'
		public Keyword getCONSTKeyword_2_0() { return cCONSTKeyword_2_0; }
		
		//consts += Constant+
		public Assignment getConstsAssignment_2_1() { return cConstsAssignment_2_1; }
		
		//Constant
		public RuleCall getConstsConstantParserRuleCall_2_1_0() { return cConstsConstantParserRuleCall_2_1_0; }
		
		//('VAR' vars += VarDeclaration+) ?
		public Group getGroup_3() { return cGroup_3; }
		
		//'VAR'
		public Keyword getVARKeyword_3_0() { return cVARKeyword_3_0; }
		
		//vars += VarDeclaration+
		public Assignment getVarsAssignment_3_1() { return cVarsAssignment_3_1; }
		
		//VarDeclaration
		public RuleCall getVarsVarDeclarationParserRuleCall_3_1_0() { return cVarsVarDeclarationParserRuleCall_3_1_0; }
		
		//(proc += Procedure)*
		public Assignment getProcAssignment_4() { return cProcAssignment_4; }
		
		//Procedure
		public RuleCall getProcProcedureParserRuleCall_4_0() { return cProcProcedureParserRuleCall_4_0; }
	}
	public class UserTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.UserTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameTypeIDTerminalRuleCall_0_0_0 = (RuleCall)cNameTypeAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cARRAYKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLengthAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_0_2_1_0 = (RuleCall)cLengthAssignment_0_2_1.eContents().get(0);
		private final Keyword cOFKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cVartypeAssignment_0_2_3 = (Assignment)cGroup_0_2.eContents().get(3);
		private final RuleCall cVartypeOberonTypeParserRuleCall_0_2_3_0 = (RuleCall)cVartypeAssignment_0_2_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameTypeIDTerminalRuleCall_1_0_0 = (RuleCall)cNameTypeAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cRECORDKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVarsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVarsVarDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cVarsAssignment_1_2_1.eContents().get(0);
		private final Keyword cENDKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//UserTypeDeclaration:
		//     nameType = ID '=' ('ARRAY' length = INT 'OF' vartype = OberonType)
		//  | nameType = ID '=' ('RECORD' (vars += VarDeclaration)+ 'END');
		@Override public ParserRule getRule() { return rule; }
		
		//   nameType = ID '=' ('ARRAY' length = INT 'OF' vartype = OberonType)
		//| nameType = ID '=' ('RECORD' (vars += VarDeclaration)+ 'END')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nameType = ID '=' ('ARRAY' length = INT 'OF' vartype = OberonType)
		public Group getGroup_0() { return cGroup_0; }
		
		//nameType = ID
		public Assignment getNameTypeAssignment_0_0() { return cNameTypeAssignment_0_0; }
		
		//ID
		public RuleCall getNameTypeIDTerminalRuleCall_0_0_0() { return cNameTypeIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//('ARRAY' length = INT 'OF' vartype = OberonType)
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'ARRAY'
		public Keyword getARRAYKeyword_0_2_0() { return cARRAYKeyword_0_2_0; }
		
		//length = INT
		public Assignment getLengthAssignment_0_2_1() { return cLengthAssignment_0_2_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_0_2_1_0() { return cLengthINTTerminalRuleCall_0_2_1_0; }
		
		//'OF'
		public Keyword getOFKeyword_0_2_2() { return cOFKeyword_0_2_2; }
		
		//vartype = OberonType
		public Assignment getVartypeAssignment_0_2_3() { return cVartypeAssignment_0_2_3; }
		
		//OberonType
		public RuleCall getVartypeOberonTypeParserRuleCall_0_2_3_0() { return cVartypeOberonTypeParserRuleCall_0_2_3_0; }
		
		//nameType = ID '=' ('RECORD' (vars += VarDeclaration)+ 'END')
		public Group getGroup_1() { return cGroup_1; }
		
		//nameType = ID
		public Assignment getNameTypeAssignment_1_0() { return cNameTypeAssignment_1_0; }
		
		//ID
		public RuleCall getNameTypeIDTerminalRuleCall_1_0_0() { return cNameTypeIDTerminalRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//('RECORD' (vars += VarDeclaration)+ 'END')
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'RECORD'
		public Keyword getRECORDKeyword_1_2_0() { return cRECORDKeyword_1_2_0; }
		
		//(vars += VarDeclaration)+
		public Assignment getVarsAssignment_1_2_1() { return cVarsAssignment_1_2_1; }
		
		//VarDeclaration
		public RuleCall getVarsVarDeclarationParserRuleCall_1_2_1_0() { return cVarsVarDeclarationParserRuleCall_1_2_1_0; }
		
		//'END'
		public Keyword getENDKeyword_1_2_2() { return cENDKeyword_1_2_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstNameIDTerminalRuleCall_0_0 = (RuleCall)cConstNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constant:
		//    constName = ID '=' exp = Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//constName = ID '=' exp = Expression ';'
		public Group getGroup() { return cGroup; }
		
		//constName = ID
		public Assignment getConstNameAssignment_0() { return cConstNameAssignment_0; }
		
		//ID
		public RuleCall getConstNameIDTerminalRuleCall_0_0() { return cConstNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//exp = Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarsIDTerminalRuleCall_0_0_0 = (RuleCall)cVarsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cVarsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVarsIDTerminalRuleCall_0_1_1_0 = (RuleCall)cVarsAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarTypeOberonTypeParserRuleCall_2_0 = (RuleCall)cVarTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarDeclaration:
		//    (vars += ID (',' vars += ID)*) ':' varType = OberonType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(vars += ID (',' vars += ID)*) ':' varType = OberonType ';'
		public Group getGroup() { return cGroup; }
		
		//(vars += ID (',' vars += ID)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//vars += ID
		public Assignment getVarsAssignment_0_0() { return cVarsAssignment_0_0; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_0_0_0() { return cVarsIDTerminalRuleCall_0_0_0; }
		
		//(',' vars += ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//vars += ID
		public Assignment getVarsAssignment_0_1_1() { return cVarsAssignment_0_1_1; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_0_1_1_0() { return cVarsIDTerminalRuleCall_0_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//varType = OberonType
		public Assignment getVarTypeAssignment_2() { return cVarTypeAssignment_2; }
		
		//OberonType
		public RuleCall getVarTypeOberonTypeParserRuleCall_2_0() { return cVarTypeOberonTypeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCEDUREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFormalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalsFormalsParserRuleCall_3_0 = (RuleCall)cFormalsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cProcedureTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cProcedureTypeOberonTypeParserRuleCall_5_1_0 = (RuleCall)cProcedureTypeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDeclAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeclDeclarationsParserRuleCall_7_0 = (RuleCall)cDeclAssignment_7.eContents().get(0);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Procedure :
		//  'PROCEDURE' name = ID '(' formals = Formals?  ')' (':' procedureType = OberonType)? ';'
		//    decl = Declarations
		//    block = Block
		//   ID
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//'PROCEDURE' name = ID '(' formals = Formals?  ')' (':' procedureType = OberonType)? ';'
		//  decl = Declarations
		//  block = Block
		// ID
		public Group getGroup() { return cGroup; }
		
		//'PROCEDURE'
		public Keyword getPROCEDUREKeyword_0() { return cPROCEDUREKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//formals = Formals?
		public Assignment getFormalsAssignment_3() { return cFormalsAssignment_3; }
		
		//Formals
		public RuleCall getFormalsFormalsParserRuleCall_3_0() { return cFormalsFormalsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' procedureType = OberonType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//procedureType = OberonType
		public Assignment getProcedureTypeAssignment_5_1() { return cProcedureTypeAssignment_5_1; }
		
		//OberonType
		public RuleCall getProcedureTypeOberonTypeParserRuleCall_5_1_0() { return cProcedureTypeOberonTypeParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//decl = Declarations
		public Assignment getDeclAssignment_7() { return cDeclAssignment_7; }
		
		//Declarations
		public RuleCall getDeclDeclarationsParserRuleCall_7_0() { return cDeclDeclarationsParserRuleCall_7_0; }
		
		//block = Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_9() { return cIDTerminalRuleCall_9; }
	}
	public class FormalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Formals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgFormalArgParserRuleCall_0_0 = (RuleCall)cArgAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsFormalArgParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//Formals
		// : arg = FormalArg (',' args += FormalArg)*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//arg = FormalArg (',' args += FormalArg)*
		public Group getGroup() { return cGroup; }
		
		//arg = FormalArg
		public Assignment getArgAssignment_0() { return cArgAssignment_0; }
		
		//FormalArg
		public RuleCall getArgFormalArgParserRuleCall_0_0() { return cArgFormalArgParserRuleCall_0_0; }
		
		//(',' args += FormalArg)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//args += FormalArg
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//FormalArg
		public RuleCall getArgsFormalArgParserRuleCall_1_1_0() { return cArgsFormalArgParserRuleCall_1_1_0; }
	}
	public class FormalArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.FormalArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cArgsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgsIDTerminalRuleCall_0_0_0 = (RuleCall)cArgsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_0_1_1_0 = (RuleCall)cArgsAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgTypeOberonTypeParserRuleCall_2_0 = (RuleCall)cArgTypeAssignment_2.eContents().get(0);
		
		//FormalArg
		// : (args += ID (',' args += ID)*) ':' argType = OberonType
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//(args += ID (',' args += ID)*) ':' argType = OberonType
		public Group getGroup() { return cGroup; }
		
		//(args += ID (',' args += ID)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//args += ID
		public Assignment getArgsAssignment_0_0() { return cArgsAssignment_0_0; }
		
		//ID
		public RuleCall getArgsIDTerminalRuleCall_0_0_0() { return cArgsIDTerminalRuleCall_0_0_0; }
		
		//(',' args += ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//args += ID
		public Assignment getArgsAssignment_0_1_1() { return cArgsAssignment_0_1_1; }
		
		//ID
		public RuleCall getArgsIDTerminalRuleCall_0_1_1_0() { return cArgsIDTerminalRuleCall_0_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//argType = OberonType
		public Assignment getArgTypeAssignment_2() { return cArgTypeAssignment_2; }
		
		//OberonType
		public RuleCall getArgTypeOberonTypeParserRuleCall_2_0() { return cArgTypeOberonTypeParserRuleCall_2_0; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		// // TODO: we should also support VarBased formal arguments.
		//Arguments
		// : exp = Expression (',' exps += Expression)*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//exp = Expression (',' exps += Expression)*
		public Group getGroup() { return cGroup; }
		
		//exp = Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//(',' exps += Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exps += Expression
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }
		
		//Expression
		public RuleCall getExpsExpressionParserRuleCall_1_1_0() { return cExpsExpressionParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOprOperationParserRuleCall_1_0_0 = (RuleCall)cOprAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Expression
		// : left = TExpression (opr += Operation  right += Expression)*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//left = TExpression (opr += Operation  right += Expression)*
		public Group getGroup() { return cGroup; }
		
		//left = TExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//TExpression
		public RuleCall getLeftTExpressionParserRuleCall_0_0() { return cLeftTExpressionParserRuleCall_0_0; }
		
		//(opr += Operation  right += Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//opr += Operation
		public Assignment getOprAssignment_1_0() { return cOprAssignment_1_0; }
		
		//Operation
		public RuleCall getOprOperationParserRuleCall_1_0_0() { return cOprOperationParserRuleCall_1_0_0; }
		
		//right += Expression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_1_0() { return cRightExpressionParserRuleCall_1_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperationRelacionalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cOperationRelacionalAlternatives_0_0 = (Alternatives)cOperationRelacionalAssignment_0.eContents().get(0);
		private final Keyword cOperationRelacionalEqualsSignKeyword_0_0_0 = (Keyword)cOperationRelacionalAlternatives_0_0.eContents().get(0);
		private final Keyword cOperationRelacionalNumberSignKeyword_0_0_1 = (Keyword)cOperationRelacionalAlternatives_0_0.eContents().get(1);
		private final Keyword cOperationRelacionalLessThanSignKeyword_0_0_2 = (Keyword)cOperationRelacionalAlternatives_0_0.eContents().get(2);
		private final Keyword cOperationRelacionalLessThanSignEqualsSignKeyword_0_0_3 = (Keyword)cOperationRelacionalAlternatives_0_0.eContents().get(3);
		private final Keyword cOperationRelacionalGreaterThanSignKeyword_0_0_4 = (Keyword)cOperationRelacionalAlternatives_0_0.eContents().get(4);
		private final Keyword cOperationRelacionalGreaterThanSignEqualsSignKeyword_0_0_5 = (Keyword)cOperationRelacionalAlternatives_0_0.eContents().get(5);
		private final Assignment cOperationAritmeticAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cOperationAritmeticAlternatives_1_0 = (Alternatives)cOperationAritmeticAssignment_1.eContents().get(0);
		private final Keyword cOperationAritmeticAsteriskKeyword_1_0_0 = (Keyword)cOperationAritmeticAlternatives_1_0.eContents().get(0);
		private final Keyword cOperationAritmeticSolidusKeyword_1_0_1 = (Keyword)cOperationAritmeticAlternatives_1_0.eContents().get(1);
		private final Keyword cOperationAritmeticPlusSignKeyword_1_0_2 = (Keyword)cOperationAritmeticAlternatives_1_0.eContents().get(2);
		private final Keyword cOperationAritmeticHyphenMinusKeyword_1_0_3 = (Keyword)cOperationAritmeticAlternatives_1_0.eContents().get(3);
		private final Assignment cOperationLogicAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cOperationLogicAlternatives_2_0 = (Alternatives)cOperationLogicAssignment_2.eContents().get(0);
		private final Keyword cOperationLogicAmpersandAmpersandKeyword_2_0_0 = (Keyword)cOperationLogicAlternatives_2_0.eContents().get(0);
		private final Keyword cOperationLogicVerticalLineVerticalLineKeyword_2_0_1 = (Keyword)cOperationLogicAlternatives_2_0.eContents().get(1);
		
		//Operation
		// : OperationRelacional = ('=' | '#' | '<' | '<=' | '>' | '>=')
		// | OperationAritmetic = ('*' | '/' | '+' | '-')
		// | OperationLogic = ('&&' | '||')
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationRelacional = ('=' | '#' | '<' | '<=' | '>' | '>=')
		//| OperationAritmetic = ('*' | '/' | '+' | '-')
		//| OperationLogic = ('&&' | '||')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationRelacional = ('=' | '#' | '<' | '<=' | '>' | '>=')
		public Assignment getOperationRelacionalAssignment_0() { return cOperationRelacionalAssignment_0; }
		
		//('=' | '#' | '<' | '<=' | '>' | '>=')
		public Alternatives getOperationRelacionalAlternatives_0_0() { return cOperationRelacionalAlternatives_0_0; }
		
		//'='
		public Keyword getOperationRelacionalEqualsSignKeyword_0_0_0() { return cOperationRelacionalEqualsSignKeyword_0_0_0; }
		
		//'#'
		public Keyword getOperationRelacionalNumberSignKeyword_0_0_1() { return cOperationRelacionalNumberSignKeyword_0_0_1; }
		
		//'<'
		public Keyword getOperationRelacionalLessThanSignKeyword_0_0_2() { return cOperationRelacionalLessThanSignKeyword_0_0_2; }
		
		//'<='
		public Keyword getOperationRelacionalLessThanSignEqualsSignKeyword_0_0_3() { return cOperationRelacionalLessThanSignEqualsSignKeyword_0_0_3; }
		
		//'>'
		public Keyword getOperationRelacionalGreaterThanSignKeyword_0_0_4() { return cOperationRelacionalGreaterThanSignKeyword_0_0_4; }
		
		//'>='
		public Keyword getOperationRelacionalGreaterThanSignEqualsSignKeyword_0_0_5() { return cOperationRelacionalGreaterThanSignEqualsSignKeyword_0_0_5; }
		
		//OperationAritmetic = ('*' | '/' | '+' | '-')
		public Assignment getOperationAritmeticAssignment_1() { return cOperationAritmeticAssignment_1; }
		
		//('*' | '/' | '+' | '-')
		public Alternatives getOperationAritmeticAlternatives_1_0() { return cOperationAritmeticAlternatives_1_0; }
		
		//'*'
		public Keyword getOperationAritmeticAsteriskKeyword_1_0_0() { return cOperationAritmeticAsteriskKeyword_1_0_0; }
		
		//'/'
		public Keyword getOperationAritmeticSolidusKeyword_1_0_1() { return cOperationAritmeticSolidusKeyword_1_0_1; }
		
		//'+'
		public Keyword getOperationAritmeticPlusSignKeyword_1_0_2() { return cOperationAritmeticPlusSignKeyword_1_0_2; }
		
		//'-'
		public Keyword getOperationAritmeticHyphenMinusKeyword_1_0_3() { return cOperationAritmeticHyphenMinusKeyword_1_0_3; }
		
		//OperationLogic = ('&&' | '||')
		public Assignment getOperationLogicAssignment_2() { return cOperationLogicAssignment_2; }
		
		//('&&' | '||')
		public Alternatives getOperationLogicAlternatives_2_0() { return cOperationLogicAlternatives_2_0; }
		
		//'&&'
		public Keyword getOperationLogicAmpersandAmpersandKeyword_2_0_0() { return cOperationLogicAmpersandAmpersandKeyword_2_0_0; }
		
		//'||'
		public Keyword getOperationLogicVerticalLineVerticalLineKeyword_2_0_1() { return cOperationLogicVerticalLineVerticalLineKeyword_2_0_1; }
	}
	public class TExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.TExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_1_0 = (RuleCall)cExpAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIntvalueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntvalueIntValueParserRuleCall_1_0 = (RuleCall)cIntvalueAssignment_1.eContents().get(0);
		private final Assignment cBoolvalueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBoolvalueBoolValueParserRuleCall_2_0 = (RuleCall)cBoolvalueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsArgumentsParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cFullStopKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAtribsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAtribsIDTerminalRuleCall_3_2_1_0 = (RuleCall)cAtribsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIndexAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_3_3_1_0 = (RuleCall)cIndexAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3_2 = (Keyword)cGroup_3_3.eContents().get(2);
		
		//TExpression returns Expression
		//: '(' exp = Expression ')'
		//| intvalue = IntValue
		//| boolvalue = BoolValue
		//| name = ID ('(' args += Arguments? ')')? ('.' atribs += ID)* ('[' index += Expression ']')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp = Expression ')'
		//| intvalue = IntValue
		//| boolvalue = BoolValue
		//| name = ID ('(' args += Arguments? ')')? ('.' atribs += ID)* ('[' index += Expression ']')*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' exp = Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//exp = Expression
		public Assignment getExpAssignment_0_1() { return cExpAssignment_0_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_1_0() { return cExpExpressionParserRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//intvalue = IntValue
		public Assignment getIntvalueAssignment_1() { return cIntvalueAssignment_1; }
		
		//IntValue
		public RuleCall getIntvalueIntValueParserRuleCall_1_0() { return cIntvalueIntValueParserRuleCall_1_0; }
		
		//boolvalue = BoolValue
		public Assignment getBoolvalueAssignment_2() { return cBoolvalueAssignment_2; }
		
		//BoolValue
		public RuleCall getBoolvalueBoolValueParserRuleCall_2_0() { return cBoolvalueBoolValueParserRuleCall_2_0; }
		
		//name = ID ('(' args += Arguments? ')')? ('.' atribs += ID)* ('[' index += Expression ']')*
		public Group getGroup_3() { return cGroup_3; }
		
		//name = ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//('(' args += Arguments? ')')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }
		
		//args += Arguments?
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_3_1_1_0() { return cArgsArgumentsParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
		
		//('.' atribs += ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2_0() { return cFullStopKeyword_3_2_0; }
		
		//atribs += ID
		public Assignment getAtribsAssignment_3_2_1() { return cAtribsAssignment_3_2_1; }
		
		//ID
		public RuleCall getAtribsIDTerminalRuleCall_3_2_1_0() { return cAtribsIDTerminalRuleCall_3_2_1_0; }
		
		//('[' index += Expression ']')*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_3_0() { return cLeftSquareBracketKeyword_3_3_0; }
		
		//index += Expression
		public Assignment getIndexAssignment_3_3_1() { return cIndexAssignment_3_3_1; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_3_3_1_0() { return cIndexExpressionParserRuleCall_3_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3_2() { return cRightSquareBracketKeyword_3_3_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStmtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStmtTStatementParserRuleCall_0_0 = (RuleCall)cStmtAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStmtsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStmtsStatementParserRuleCall_1_1_0 = (RuleCall)cStmtsAssignment_1_1.eContents().get(0);
		
		//Statement
		// : stmt = TStatement (';' stmts += Statement)*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//stmt = TStatement (';' stmts += Statement)*
		public Group getGroup() { return cGroup; }
		
		//stmt = TStatement
		public Assignment getStmtAssignment_0() { return cStmtAssignment_0; }
		
		//TStatement
		public RuleCall getStmtTStatementParserRuleCall_0_0() { return cStmtTStatementParserRuleCall_0_0; }
		
		//(';' stmts += Statement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//stmts += Statement
		public Assignment getStmtsAssignment_1_1() { return cStmtsAssignment_1_1; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_1_1_0() { return cStmtsStatementParserRuleCall_1_1_0; }
	}
	public class TStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.TStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDesDesignatorParserRuleCall_0_0_0 = (RuleCall)cDesAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReadIntKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVarAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_1_2_0 = (RuleCall)cVarAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cWriteKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIFKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCondAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_3_1_0 = (RuleCall)cCondAssignment_3_1.eContents().get(0);
		private final Keyword cTHENKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cThenStmtAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cThenStmtStatementParserRuleCall_3_3_0 = (RuleCall)cThenStmtAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cELSIFKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cElsifsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cElsifsElseIfStmtParserRuleCall_3_4_1_0 = (RuleCall)cElsifsAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cELSEKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cElseStmtAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cElseStmtStatementParserRuleCall_3_5_1_0 = (RuleCall)cElseStmtAssignment_3_5_1.eContents().get(0);
		private final Keyword cENDKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cWHILEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCondAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_4_1_0 = (RuleCall)cCondAssignment_4_1.eContents().get(0);
		private final Keyword cDOKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cStmtAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cStmtStatementParserRuleCall_4_3_0 = (RuleCall)cStmtAssignment_4_3.eContents().get(0);
		private final Keyword cENDKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cREPEATKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStmtAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStmtStatementParserRuleCall_5_1_0 = (RuleCall)cStmtAssignment_5_1.eContents().get(0);
		private final Keyword cUNTILKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cCondAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_5_3_0 = (RuleCall)cCondAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cFORKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitStatementParserRuleCall_6_1_0 = (RuleCall)cInitAssignment_6_1.eContents().get(0);
		private final Keyword cTOKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cConditionAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_6_3_0 = (RuleCall)cConditionAssignment_6_3.eContents().get(0);
		private final Keyword cDOKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cStmtAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cStmtStatementParserRuleCall_6_5_0 = (RuleCall)cStmtAssignment_6_5.eContents().get(0);
		private final Keyword cENDKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cFORKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVarAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_7_1_0 = (RuleCall)cVarAssignment_7_1.eContents().get(0);
		private final Keyword cINKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cMinAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cMinExpressionParserRuleCall_7_3_0 = (RuleCall)cMinAssignment_7_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cMaxAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cMaxExpressionParserRuleCall_7_5_0 = (RuleCall)cMaxAssignment_7_5.eContents().get(0);
		private final Keyword cDOKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Assignment cStmtAssignment_7_7 = (Assignment)cGroup_7.eContents().get(7);
		private final RuleCall cStmtStatementParserRuleCall_7_7_0 = (RuleCall)cStmtAssignment_7_7.eContents().get(0);
		private final Keyword cENDKeyword_7_8 = (Keyword)cGroup_7.eContents().get(8);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLOOPKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStmtAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStmtStatementParserRuleCall_8_1_0 = (RuleCall)cStmtAssignment_8_1.eContents().get(0);
		private final Keyword cENDKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cRETURNKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cExpAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_9_1_0 = (RuleCall)cExpAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cCASEKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cExpAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_10_1_0 = (RuleCall)cExpAssignment_10_1.eContents().get(0);
		private final Keyword cOFKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cCaseAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cCaseCaseAlternativeParserRuleCall_10_3_0 = (RuleCall)cCaseAssignment_10_3.eContents().get(0);
		private final Group cGroup_10_4 = (Group)cGroup_10.eContents().get(4);
		private final Keyword cVerticalLineKeyword_10_4_0 = (Keyword)cGroup_10_4.eContents().get(0);
		private final Assignment cCasesAssignment_10_4_1 = (Assignment)cGroup_10_4.eContents().get(1);
		private final RuleCall cCasesCaseAlternativeParserRuleCall_10_4_1_0 = (RuleCall)cCasesAssignment_10_4_1.eContents().get(0);
		private final Group cGroup_10_5 = (Group)cGroup_10.eContents().get(5);
		private final Keyword cELSEKeyword_10_5_0 = (Keyword)cGroup_10_5.eContents().get(0);
		private final Assignment cElseStmtAssignment_10_5_1 = (Assignment)cGroup_10_5.eContents().get(1);
		private final RuleCall cElseStmtStatementParserRuleCall_10_5_1_0 = (RuleCall)cElseStmtAssignment_10_5_1.eContents().get(0);
		private final Keyword cENDKeyword_10_6 = (Keyword)cGroup_10.eContents().get(6);
		private final Assignment cExitAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cExitEXITKeyword_11_0 = (Keyword)cExitAssignment_11.eContents().get(0);
		
		//TStatement returns Statement
		// : des = Designator (':=' exp = Expression)?
		// | 'readInt'  '(' var = ID ')'
		// | 'write' '(' exp = Expression ')'
		// | 'IF' cond = Expression 'THEN' thenStmt = Statement ('ELSIF' elsifs += elseIfStmt)* ('ELSE' elseStmt = Statement)? 'END'
		// | 'WHILE' cond = Expression 'DO' stmt = Statement 'END'
		// | 'REPEAT' stmt = Statement 'UNTIL' cond = Expression
		// | 'FOR' init = Statement 'TO' condition = Expression 'DO' stmt = Statement 'END'
		// | 'FOR' var = ID 'IN' min = Expression '..' max = Expression 'DO' stmt = Statement 'END'
		// | 'LOOP' stmt=Statement 'END'
		// | 'RETURN' exp = Expression
		// | 'CASE' exp = Expression 'OF' case = caseAlternative ('|' cases += caseAlternative)* ('ELSE' elseStmt= Statement)? 'END'
		// | exit = 'EXIT'
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//des = Designator (':=' exp = Expression)?
		//| 'readInt'  '(' var = ID ')'
		//| 'write' '(' exp = Expression ')'
		//| 'IF' cond = Expression 'THEN' thenStmt = Statement ('ELSIF' elsifs += elseIfStmt)* ('ELSE' elseStmt = Statement)? 'END'
		//| 'WHILE' cond = Expression 'DO' stmt = Statement 'END'
		//| 'REPEAT' stmt = Statement 'UNTIL' cond = Expression
		//| 'FOR' init = Statement 'TO' condition = Expression 'DO' stmt = Statement 'END'
		//| 'FOR' var = ID 'IN' min = Expression '..' max = Expression 'DO' stmt = Statement 'END'
		//| 'LOOP' stmt=Statement 'END'
		//| 'RETURN' exp = Expression
		//| 'CASE' exp = Expression 'OF' case = caseAlternative ('|' cases += caseAlternative)* ('ELSE' elseStmt= Statement)? 'END'
		//| exit = 'EXIT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//des = Designator (':=' exp = Expression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//des = Designator
		public Assignment getDesAssignment_0_0() { return cDesAssignment_0_0; }
		
		//Designator
		public RuleCall getDesDesignatorParserRuleCall_0_0_0() { return cDesDesignatorParserRuleCall_0_0_0; }
		
		//(':=' exp = Expression)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_0() { return cColonEqualsSignKeyword_0_1_0; }
		
		//exp = Expression
		public Assignment getExpAssignment_0_1_1() { return cExpAssignment_0_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_1_1_0() { return cExpExpressionParserRuleCall_0_1_1_0; }
		
		//'readInt'  '(' var = ID ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'readInt'
		public Keyword getReadIntKeyword_1_0() { return cReadIntKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//var = ID
		public Assignment getVarAssignment_1_2() { return cVarAssignment_1_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_1_2_0() { return cVarIDTerminalRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'write' '(' exp = Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'write'
		public Keyword getWriteKeyword_2_0() { return cWriteKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//exp = Expression
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_2_0() { return cExpExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'IF' cond = Expression 'THEN' thenStmt = Statement ('ELSIF' elsifs += elseIfStmt)* ('ELSE' elseStmt = Statement)? 'END'
		public Group getGroup_3() { return cGroup_3; }
		
		//'IF'
		public Keyword getIFKeyword_3_0() { return cIFKeyword_3_0; }
		
		//cond = Expression
		public Assignment getCondAssignment_3_1() { return cCondAssignment_3_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_3_1_0() { return cCondExpressionParserRuleCall_3_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_3_2() { return cTHENKeyword_3_2; }
		
		//thenStmt = Statement
		public Assignment getThenStmtAssignment_3_3() { return cThenStmtAssignment_3_3; }
		
		//Statement
		public RuleCall getThenStmtStatementParserRuleCall_3_3_0() { return cThenStmtStatementParserRuleCall_3_3_0; }
		
		//('ELSIF' elsifs += elseIfStmt)*
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'ELSIF'
		public Keyword getELSIFKeyword_3_4_0() { return cELSIFKeyword_3_4_0; }
		
		//elsifs += elseIfStmt
		public Assignment getElsifsAssignment_3_4_1() { return cElsifsAssignment_3_4_1; }
		
		//elseIfStmt
		public RuleCall getElsifsElseIfStmtParserRuleCall_3_4_1_0() { return cElsifsElseIfStmtParserRuleCall_3_4_1_0; }
		
		//('ELSE' elseStmt = Statement)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'ELSE'
		public Keyword getELSEKeyword_3_5_0() { return cELSEKeyword_3_5_0; }
		
		//elseStmt = Statement
		public Assignment getElseStmtAssignment_3_5_1() { return cElseStmtAssignment_3_5_1; }
		
		//Statement
		public RuleCall getElseStmtStatementParserRuleCall_3_5_1_0() { return cElseStmtStatementParserRuleCall_3_5_1_0; }
		
		//'END'
		public Keyword getENDKeyword_3_6() { return cENDKeyword_3_6; }
		
		//'WHILE' cond = Expression 'DO' stmt = Statement 'END'
		public Group getGroup_4() { return cGroup_4; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_4_0() { return cWHILEKeyword_4_0; }
		
		//cond = Expression
		public Assignment getCondAssignment_4_1() { return cCondAssignment_4_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_1_0() { return cCondExpressionParserRuleCall_4_1_0; }
		
		//'DO'
		public Keyword getDOKeyword_4_2() { return cDOKeyword_4_2; }
		
		//stmt = Statement
		public Assignment getStmtAssignment_4_3() { return cStmtAssignment_4_3; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_4_3_0() { return cStmtStatementParserRuleCall_4_3_0; }
		
		//'END'
		public Keyword getENDKeyword_4_4() { return cENDKeyword_4_4; }
		
		//'REPEAT' stmt = Statement 'UNTIL' cond = Expression
		public Group getGroup_5() { return cGroup_5; }
		
		//'REPEAT'
		public Keyword getREPEATKeyword_5_0() { return cREPEATKeyword_5_0; }
		
		//stmt = Statement
		public Assignment getStmtAssignment_5_1() { return cStmtAssignment_5_1; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_5_1_0() { return cStmtStatementParserRuleCall_5_1_0; }
		
		//'UNTIL'
		public Keyword getUNTILKeyword_5_2() { return cUNTILKeyword_5_2; }
		
		//cond = Expression
		public Assignment getCondAssignment_5_3() { return cCondAssignment_5_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_5_3_0() { return cCondExpressionParserRuleCall_5_3_0; }
		
		//'FOR' init = Statement 'TO' condition = Expression 'DO' stmt = Statement 'END'
		public Group getGroup_6() { return cGroup_6; }
		
		//'FOR'
		public Keyword getFORKeyword_6_0() { return cFORKeyword_6_0; }
		
		//init = Statement
		public Assignment getInitAssignment_6_1() { return cInitAssignment_6_1; }
		
		//Statement
		public RuleCall getInitStatementParserRuleCall_6_1_0() { return cInitStatementParserRuleCall_6_1_0; }
		
		//'TO'
		public Keyword getTOKeyword_6_2() { return cTOKeyword_6_2; }
		
		//condition = Expression
		public Assignment getConditionAssignment_6_3() { return cConditionAssignment_6_3; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_6_3_0() { return cConditionExpressionParserRuleCall_6_3_0; }
		
		//'DO'
		public Keyword getDOKeyword_6_4() { return cDOKeyword_6_4; }
		
		//stmt = Statement
		public Assignment getStmtAssignment_6_5() { return cStmtAssignment_6_5; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_6_5_0() { return cStmtStatementParserRuleCall_6_5_0; }
		
		//'END'
		public Keyword getENDKeyword_6_6() { return cENDKeyword_6_6; }
		
		//'FOR' var = ID 'IN' min = Expression '..' max = Expression 'DO' stmt = Statement 'END'
		public Group getGroup_7() { return cGroup_7; }
		
		//'FOR'
		public Keyword getFORKeyword_7_0() { return cFORKeyword_7_0; }
		
		//var = ID
		public Assignment getVarAssignment_7_1() { return cVarAssignment_7_1; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_7_1_0() { return cVarIDTerminalRuleCall_7_1_0; }
		
		//'IN'
		public Keyword getINKeyword_7_2() { return cINKeyword_7_2; }
		
		//min = Expression
		public Assignment getMinAssignment_7_3() { return cMinAssignment_7_3; }
		
		//Expression
		public RuleCall getMinExpressionParserRuleCall_7_3_0() { return cMinExpressionParserRuleCall_7_3_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_7_4() { return cFullStopFullStopKeyword_7_4; }
		
		//max = Expression
		public Assignment getMaxAssignment_7_5() { return cMaxAssignment_7_5; }
		
		//Expression
		public RuleCall getMaxExpressionParserRuleCall_7_5_0() { return cMaxExpressionParserRuleCall_7_5_0; }
		
		//'DO'
		public Keyword getDOKeyword_7_6() { return cDOKeyword_7_6; }
		
		//stmt = Statement
		public Assignment getStmtAssignment_7_7() { return cStmtAssignment_7_7; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_7_7_0() { return cStmtStatementParserRuleCall_7_7_0; }
		
		//'END'
		public Keyword getENDKeyword_7_8() { return cENDKeyword_7_8; }
		
		//'LOOP' stmt=Statement 'END'
		public Group getGroup_8() { return cGroup_8; }
		
		//'LOOP'
		public Keyword getLOOPKeyword_8_0() { return cLOOPKeyword_8_0; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_8_1() { return cStmtAssignment_8_1; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_8_1_0() { return cStmtStatementParserRuleCall_8_1_0; }
		
		//'END'
		public Keyword getENDKeyword_8_2() { return cENDKeyword_8_2; }
		
		//'RETURN' exp = Expression
		public Group getGroup_9() { return cGroup_9; }
		
		//'RETURN'
		public Keyword getRETURNKeyword_9_0() { return cRETURNKeyword_9_0; }
		
		//exp = Expression
		public Assignment getExpAssignment_9_1() { return cExpAssignment_9_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_9_1_0() { return cExpExpressionParserRuleCall_9_1_0; }
		
		//'CASE' exp = Expression 'OF' case = caseAlternative ('|' cases += caseAlternative)* ('ELSE' elseStmt= Statement)? 'END'
		public Group getGroup_10() { return cGroup_10; }
		
		//'CASE'
		public Keyword getCASEKeyword_10_0() { return cCASEKeyword_10_0; }
		
		//exp = Expression
		public Assignment getExpAssignment_10_1() { return cExpAssignment_10_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_10_1_0() { return cExpExpressionParserRuleCall_10_1_0; }
		
		//'OF'
		public Keyword getOFKeyword_10_2() { return cOFKeyword_10_2; }
		
		//case = caseAlternative
		public Assignment getCaseAssignment_10_3() { return cCaseAssignment_10_3; }
		
		//caseAlternative
		public RuleCall getCaseCaseAlternativeParserRuleCall_10_3_0() { return cCaseCaseAlternativeParserRuleCall_10_3_0; }
		
		//('|' cases += caseAlternative)*
		public Group getGroup_10_4() { return cGroup_10_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_10_4_0() { return cVerticalLineKeyword_10_4_0; }
		
		//cases += caseAlternative
		public Assignment getCasesAssignment_10_4_1() { return cCasesAssignment_10_4_1; }
		
		//caseAlternative
		public RuleCall getCasesCaseAlternativeParserRuleCall_10_4_1_0() { return cCasesCaseAlternativeParserRuleCall_10_4_1_0; }
		
		//('ELSE' elseStmt= Statement)?
		public Group getGroup_10_5() { return cGroup_10_5; }
		
		//'ELSE'
		public Keyword getELSEKeyword_10_5_0() { return cELSEKeyword_10_5_0; }
		
		//elseStmt= Statement
		public Assignment getElseStmtAssignment_10_5_1() { return cElseStmtAssignment_10_5_1; }
		
		//Statement
		public RuleCall getElseStmtStatementParserRuleCall_10_5_1_0() { return cElseStmtStatementParserRuleCall_10_5_1_0; }
		
		//'END'
		public Keyword getENDKeyword_10_6() { return cENDKeyword_10_6; }
		
		//exit = 'EXIT'
		public Assignment getExitAssignment_11() { return cExitAssignment_11; }
		
		//'EXIT'
		public Keyword getExitEXITKeyword_11_0() { return cExitEXITKeyword_11_0; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.Designator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorTDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cIndexesAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cIndexesExpressionParserRuleCall_1_0_1_0 = (RuleCall)cIndexesAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAtribsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAtribsIDTerminalRuleCall_1_1_1_0 = (RuleCall)cAtribsAssignment_1_1_1.eContents().get(0);
		
		//Designator
		// : designator = TDesignator ('[' indexes += Expression ']'  |  '.' atribs += ID )*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//designator = TDesignator ('[' indexes += Expression ']'  |  '.' atribs += ID )*
		public Group getGroup() { return cGroup; }
		
		//designator = TDesignator
		public Assignment getDesignatorAssignment_0() { return cDesignatorAssignment_0; }
		
		//TDesignator
		public RuleCall getDesignatorTDesignatorParserRuleCall_0_0() { return cDesignatorTDesignatorParserRuleCall_0_0; }
		
		//('[' indexes += Expression ']'  |  '.' atribs += ID )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'[' indexes += Expression ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//indexes += Expression
		public Assignment getIndexesAssignment_1_0_1() { return cIndexesAssignment_1_0_1; }
		
		//Expression
		public RuleCall getIndexesExpressionParserRuleCall_1_0_1_0() { return cIndexesExpressionParserRuleCall_1_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }
		
		//'.' atribs += ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//atribs += ID
		public Assignment getAtribsAssignment_1_1_1() { return cAtribsAssignment_1_1_1; }
		
		//ID
		public RuleCall getAtribsIDTerminalRuleCall_1_1_1_0() { return cAtribsIDTerminalRuleCall_1_1_1_0; }
	}
	public class TDesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.TDesignator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TDesignator returns Designator
		// : name = ID ('(' args += Arguments? ')')?
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID ('(' args += Arguments? ')')?
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' args += Arguments? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//args += Arguments?
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_1_1_0() { return cArgsArgumentsParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class CaseAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.caseAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMaxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMaxExpressionParserRuleCall_1_1_0 = (RuleCall)cMaxAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStatementParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		
		//caseAlternative
		// : exp = Expression ('..' max = Expression)? ':' stmt = Statement
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//exp = Expression ('..' max = Expression)? ':' stmt = Statement
		public Group getGroup() { return cGroup; }
		
		//exp = Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//('..' max = Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//max = Expression
		public Assignment getMaxAssignment_1_1() { return cMaxAssignment_1_1; }
		
		//Expression
		public RuleCall getMaxExpressionParserRuleCall_1_1_0() { return cMaxExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//stmt = Statement
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_3_0() { return cStmtStatementParserRuleCall_3_0; }
	}
	public class ElseIfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.elseIfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondExpressionParserRuleCall_0_0 = (RuleCall)cCondAssignment_0.eContents().get(0);
		private final Keyword cTHENKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtStatementParserRuleCall_2_0 = (RuleCall)cStmtAssignment_2.eContents().get(0);
		
		//elseIfStmt : cond = Expression 'THEN' stmt = Statement ;
		@Override public ParserRule getRule() { return rule; }
		
		//cond = Expression 'THEN' stmt = Statement
		public Group getGroup() { return cGroup; }
		
		//cond = Expression
		public Assignment getCondAssignment_0() { return cCondAssignment_0; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_0_0() { return cCondExpressionParserRuleCall_0_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_1() { return cTHENKeyword_1; }
		
		//stmt = Statement
		public Assignment getStmtAssignment_2() { return cStmtAssignment_2; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_2_0() { return cStmtStatementParserRuleCall_2_0; }
	}
	public class OberonTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.OberonType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cINTEGERKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBOOLEANKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cARRAYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNumElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumElementINTTerminalRuleCall_3_1_0 = (RuleCall)cNumElementAssignment_3_1.eContents().get(0);
		private final Keyword cOFKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNameTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNameTypeOberonTypeParserRuleCall_3_3_0 = (RuleCall)cNameTypeAssignment_3_3.eContents().get(0);
		
		//OberonType:
		//    {Integer} 'INTEGER' | {Boolean} 'BOOLEAN' | name=ID | 'ARRAY' numElement=INT 'OF' nameType=OberonType;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer} 'INTEGER' | {Boolean} 'BOOLEAN' | name=ID | 'ARRAY' numElement=INT 'OF' nameType=OberonType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Integer} 'INTEGER'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Integer}
		public Action getIntegerAction_0_0() { return cIntegerAction_0_0; }
		
		//'INTEGER'
		public Keyword getINTEGERKeyword_0_1() { return cINTEGERKeyword_0_1; }
		
		//{Boolean} 'BOOLEAN'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Boolean}
		public Action getBooleanAction_1_0() { return cBooleanAction_1_0; }
		
		//'BOOLEAN'
		public Keyword getBOOLEANKeyword_1_1() { return cBOOLEANKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'ARRAY' numElement=INT 'OF' nameType=OberonType
		public Group getGroup_3() { return cGroup_3; }
		
		//'ARRAY'
		public Keyword getARRAYKeyword_3_0() { return cARRAYKeyword_3_0; }
		
		//numElement=INT
		public Assignment getNumElementAssignment_3_1() { return cNumElementAssignment_3_1; }
		
		//INT
		public RuleCall getNumElementINTTerminalRuleCall_3_1_0() { return cNumElementINTTerminalRuleCall_3_1_0; }
		
		//'OF'
		public Keyword getOFKeyword_3_2() { return cOFKeyword_3_2; }
		
		//nameType=OberonType
		public Assignment getNameTypeAssignment_3_3() { return cNameTypeAssignment_3_3; }
		
		//OberonType
		public RuleCall getNameTypeOberonTypeParserRuleCall_3_3_0() { return cNameTypeOberonTypeParserRuleCall_3_3_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.IntValue");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntValue : INT ;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.BoolValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTRUEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFALSEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BoolValue: TRUE | FALSE ;
		@Override public ParserRule getRule() { return rule; }
		
		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE
		public RuleCall getTRUEParserRuleCall_0() { return cTRUEParserRuleCall_0; }
		
		//FALSE
		public RuleCall getFALSEParserRuleCall_1() { return cFALSEParserRuleCall_1; }
	}
	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.TRUE");
		private final Keyword cTrueKeyword = (Keyword)rule.eContents().get(1);
		
		//TRUE  : 'True' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'True'
		public Keyword getTrueKeyword() { return cTrueKeyword; }
	}
	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.unb.cic.obron.ide.Oberon.FALSE");
		private final Keyword cFalseKeyword = (Keyword)rule.eContents().get(1);
		
		//FALSE : 'False'  ;
		@Override public ParserRule getRule() { return rule; }
		
		//'False'
		public Keyword getFalseKeyword() { return cFalseKeyword; }
	}
	
	
	private final OberonElements pOberon;
	private final BlockElements pBlock;
	private final DeclarationsElements pDeclarations;
	private final UserTypeDeclarationElements pUserTypeDeclaration;
	private final ConstantElements pConstant;
	private final VarDeclarationElements pVarDeclaration;
	private final ProcedureElements pProcedure;
	private final FormalsElements pFormals;
	private final FormalArgElements pFormalArg;
	private final ArgumentsElements pArguments;
	private final ExpressionElements pExpression;
	private final OperationElements pOperation;
	private final TExpressionElements pTExpression;
	private final StatementElements pStatement;
	private final TStatementElements pTStatement;
	private final DesignatorElements pDesignator;
	private final TDesignatorElements pTDesignator;
	private final CaseAlternativeElements pCaseAlternative;
	private final ElseIfStmtElements pElseIfStmt;
	private final OberonTypeElements pOberonType;
	private final IntValueElements pIntValue;
	private final BoolValueElements pBoolValue;
	private final TRUEElements pTRUE;
	private final FALSEElements pFALSE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OberonGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOberon = new OberonElements();
		this.pBlock = new BlockElements();
		this.pDeclarations = new DeclarationsElements();
		this.pUserTypeDeclaration = new UserTypeDeclarationElements();
		this.pConstant = new ConstantElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pProcedure = new ProcedureElements();
		this.pFormals = new FormalsElements();
		this.pFormalArg = new FormalArgElements();
		this.pArguments = new ArgumentsElements();
		this.pExpression = new ExpressionElements();
		this.pOperation = new OperationElements();
		this.pTExpression = new TExpressionElements();
		this.pStatement = new StatementElements();
		this.pTStatement = new TStatementElements();
		this.pDesignator = new DesignatorElements();
		this.pTDesignator = new TDesignatorElements();
		this.pCaseAlternative = new CaseAlternativeElements();
		this.pElseIfStmt = new ElseIfStmtElements();
		this.pOberonType = new OberonTypeElements();
		this.pIntValue = new IntValueElements();
		this.pBoolValue = new BoolValueElements();
		this.pTRUE = new TRUEElements();
		this.pFALSE = new FALSEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.unb.cic.obron.ide.Oberon".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Oberon:
	//  'MODULE' name = ID ';' declaration = Declarations block=Block ? 'END' ID '.';
	public OberonElements getOberonAccess() {
		return pOberon;
	}
	
	public ParserRule getOberonRule() {
		return getOberonAccess().getRule();
	}
	
	//Block:
	//    {Block}
	//    'BEGIN' (stmt += Statement)*  'END';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Declarations:
	//    {Declararion}
	//    ('TYPE' types += UserTypeDeclaration+) ?
	//    ('CONST' consts += Constant+) ?
	//    ('VAR' vars += VarDeclaration+) ?
	//    (proc += Procedure)*;
	public DeclarationsElements getDeclarationsAccess() {
		return pDeclarations;
	}
	
	public ParserRule getDeclarationsRule() {
		return getDeclarationsAccess().getRule();
	}
	
	//UserTypeDeclaration:
	//     nameType = ID '=' ('ARRAY' length = INT 'OF' vartype = OberonType)
	//  | nameType = ID '=' ('RECORD' (vars += VarDeclaration)+ 'END');
	public UserTypeDeclarationElements getUserTypeDeclarationAccess() {
		return pUserTypeDeclaration;
	}
	
	public ParserRule getUserTypeDeclarationRule() {
		return getUserTypeDeclarationAccess().getRule();
	}
	
	//Constant:
	//    constName = ID '=' exp = Expression ';';
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//VarDeclaration:
	//    (vars += ID (',' vars += ID)*) ':' varType = OberonType ';';
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//Procedure :
	//  'PROCEDURE' name = ID '(' formals = Formals?  ')' (':' procedureType = OberonType)? ';'
	//    decl = Declarations
	//    block = Block
	//   ID
	//  ;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Formals
	// : arg = FormalArg (',' args += FormalArg)*
	// ;
	public FormalsElements getFormalsAccess() {
		return pFormals;
	}
	
	public ParserRule getFormalsRule() {
		return getFormalsAccess().getRule();
	}
	
	//FormalArg
	// : (args += ID (',' args += ID)*) ':' argType = OberonType
	// ;
	public FormalArgElements getFormalArgAccess() {
		return pFormalArg;
	}
	
	public ParserRule getFormalArgRule() {
		return getFormalArgAccess().getRule();
	}
	
	// // TODO: we should also support VarBased formal arguments.
	//Arguments
	// : exp = Expression (',' exps += Expression)*
	// ;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Expression
	// : left = TExpression (opr += Operation  right += Expression)*
	// ;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Operation
	// : OperationRelacional = ('=' | '#' | '<' | '<=' | '>' | '>=')
	// | OperationAritmetic = ('*' | '/' | '+' | '-')
	// | OperationLogic = ('&&' | '||')
	// ;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//TExpression returns Expression
	//: '(' exp = Expression ')'
	//| intvalue = IntValue
	//| boolvalue = BoolValue
	//| name = ID ('(' args += Arguments? ')')? ('.' atribs += ID)* ('[' index += Expression ']')*
	//;
	public TExpressionElements getTExpressionAccess() {
		return pTExpression;
	}
	
	public ParserRule getTExpressionRule() {
		return getTExpressionAccess().getRule();
	}
	
	//Statement
	// : stmt = TStatement (';' stmts += Statement)*
	// ;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//TStatement returns Statement
	// : des = Designator (':=' exp = Expression)?
	// | 'readInt'  '(' var = ID ')'
	// | 'write' '(' exp = Expression ')'
	// | 'IF' cond = Expression 'THEN' thenStmt = Statement ('ELSIF' elsifs += elseIfStmt)* ('ELSE' elseStmt = Statement)? 'END'
	// | 'WHILE' cond = Expression 'DO' stmt = Statement 'END'
	// | 'REPEAT' stmt = Statement 'UNTIL' cond = Expression
	// | 'FOR' init = Statement 'TO' condition = Expression 'DO' stmt = Statement 'END'
	// | 'FOR' var = ID 'IN' min = Expression '..' max = Expression 'DO' stmt = Statement 'END'
	// | 'LOOP' stmt=Statement 'END'
	// | 'RETURN' exp = Expression
	// | 'CASE' exp = Expression 'OF' case = caseAlternative ('|' cases += caseAlternative)* ('ELSE' elseStmt= Statement)? 'END'
	// | exit = 'EXIT'
	// ;
	public TStatementElements getTStatementAccess() {
		return pTStatement;
	}
	
	public ParserRule getTStatementRule() {
		return getTStatementAccess().getRule();
	}
	
	//Designator
	// : designator = TDesignator ('[' indexes += Expression ']'  |  '.' atribs += ID )*
	// ;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	//TDesignator returns Designator
	// : name = ID ('(' args += Arguments? ')')?
	// ;
	public TDesignatorElements getTDesignatorAccess() {
		return pTDesignator;
	}
	
	public ParserRule getTDesignatorRule() {
		return getTDesignatorAccess().getRule();
	}
	
	//caseAlternative
	// : exp = Expression ('..' max = Expression)? ':' stmt = Statement
	// ;
	public CaseAlternativeElements getCaseAlternativeAccess() {
		return pCaseAlternative;
	}
	
	public ParserRule getCaseAlternativeRule() {
		return getCaseAlternativeAccess().getRule();
	}
	
	//elseIfStmt : cond = Expression 'THEN' stmt = Statement ;
	public ElseIfStmtElements getElseIfStmtAccess() {
		return pElseIfStmt;
	}
	
	public ParserRule getElseIfStmtRule() {
		return getElseIfStmtAccess().getRule();
	}
	
	//OberonType:
	//    {Integer} 'INTEGER' | {Boolean} 'BOOLEAN' | name=ID | 'ARRAY' numElement=INT 'OF' nameType=OberonType;
	public OberonTypeElements getOberonTypeAccess() {
		return pOberonType;
	}
	
	public ParserRule getOberonTypeRule() {
		return getOberonTypeAccess().getRule();
	}
	
	//IntValue : INT ;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//BoolValue: TRUE | FALSE ;
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//TRUE  : 'True' ;
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}
	
	//FALSE : 'False'  ;
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/**
 * generated by Xtext 2.25.0
 */
package br.unb.cic.obron.ide.oberon.impl;

import br.unb.cic.obron.ide.oberon.Arguments;
import br.unb.cic.obron.ide.oberon.Designator;
import br.unb.cic.obron.ide.oberon.Expression;
import br.unb.cic.obron.ide.oberon.OberonPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Designator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.DesignatorImpl#getDesignator <em>Designator</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.DesignatorImpl#getIndexes <em>Indexes</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.DesignatorImpl#getAtribs <em>Atribs</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.DesignatorImpl#getName <em>Name</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.DesignatorImpl#getArgs <em>Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DesignatorImpl extends MinimalEObjectImpl.Container implements Designator
{
  /**
   * The cached value of the '{@link #getDesignator() <em>Designator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesignator()
   * @generated
   * @ordered
   */
  protected Designator designator;

  /**
   * The cached value of the '{@link #getIndexes() <em>Indexes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexes()
   * @generated
   * @ordered
   */
  protected EList<Expression> indexes;

  /**
   * The cached value of the '{@link #getAtribs() <em>Atribs</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtribs()
   * @generated
   * @ordered
   */
  protected EList<String> atribs;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<Arguments> args;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DesignatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OberonPackage.Literals.DESIGNATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Designator getDesignator()
  {
    return designator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDesignator(Designator newDesignator, NotificationChain msgs)
  {
    Designator oldDesignator = designator;
    designator = newDesignator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.DESIGNATOR__DESIGNATOR, oldDesignator, newDesignator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDesignator(Designator newDesignator)
  {
    if (newDesignator != designator)
    {
      NotificationChain msgs = null;
      if (designator != null)
        msgs = ((InternalEObject)designator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.DESIGNATOR__DESIGNATOR, null, msgs);
      if (newDesignator != null)
        msgs = ((InternalEObject)newDesignator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.DESIGNATOR__DESIGNATOR, null, msgs);
      msgs = basicSetDesignator(newDesignator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.DESIGNATOR__DESIGNATOR, newDesignator, newDesignator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getIndexes()
  {
    if (indexes == null)
    {
      indexes = new EObjectContainmentEList<Expression>(Expression.class, this, OberonPackage.DESIGNATOR__INDEXES);
    }
    return indexes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getAtribs()
  {
    if (atribs == null)
    {
      atribs = new EDataTypeEList<String>(String.class, this, OberonPackage.DESIGNATOR__ATRIBS);
    }
    return atribs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.DESIGNATOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Arguments> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<Arguments>(Arguments.class, this, OberonPackage.DESIGNATOR__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OberonPackage.DESIGNATOR__DESIGNATOR:
        return basicSetDesignator(null, msgs);
      case OberonPackage.DESIGNATOR__INDEXES:
        return ((InternalEList<?>)getIndexes()).basicRemove(otherEnd, msgs);
      case OberonPackage.DESIGNATOR__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OberonPackage.DESIGNATOR__DESIGNATOR:
        return getDesignator();
      case OberonPackage.DESIGNATOR__INDEXES:
        return getIndexes();
      case OberonPackage.DESIGNATOR__ATRIBS:
        return getAtribs();
      case OberonPackage.DESIGNATOR__NAME:
        return getName();
      case OberonPackage.DESIGNATOR__ARGS:
        return getArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OberonPackage.DESIGNATOR__DESIGNATOR:
        setDesignator((Designator)newValue);
        return;
      case OberonPackage.DESIGNATOR__INDEXES:
        getIndexes().clear();
        getIndexes().addAll((Collection<? extends Expression>)newValue);
        return;
      case OberonPackage.DESIGNATOR__ATRIBS:
        getAtribs().clear();
        getAtribs().addAll((Collection<? extends String>)newValue);
        return;
      case OberonPackage.DESIGNATOR__NAME:
        setName((String)newValue);
        return;
      case OberonPackage.DESIGNATOR__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends Arguments>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OberonPackage.DESIGNATOR__DESIGNATOR:
        setDesignator((Designator)null);
        return;
      case OberonPackage.DESIGNATOR__INDEXES:
        getIndexes().clear();
        return;
      case OberonPackage.DESIGNATOR__ATRIBS:
        getAtribs().clear();
        return;
      case OberonPackage.DESIGNATOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case OberonPackage.DESIGNATOR__ARGS:
        getArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OberonPackage.DESIGNATOR__DESIGNATOR:
        return designator != null;
      case OberonPackage.DESIGNATOR__INDEXES:
        return indexes != null && !indexes.isEmpty();
      case OberonPackage.DESIGNATOR__ATRIBS:
        return atribs != null && !atribs.isEmpty();
      case OberonPackage.DESIGNATOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case OberonPackage.DESIGNATOR__ARGS:
        return args != null && !args.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (atribs: ");
    result.append(atribs);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DesignatorImpl

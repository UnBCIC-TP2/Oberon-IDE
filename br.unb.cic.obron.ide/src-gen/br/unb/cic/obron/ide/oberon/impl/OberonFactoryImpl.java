/**
 * generated by Xtext 2.25.0
 */
package br.unb.cic.obron.ide.oberon.impl;

import br.unb.cic.obron.ide.oberon.Arguments;
import br.unb.cic.obron.ide.oberon.Block;
import br.unb.cic.obron.ide.oberon.Constant;
import br.unb.cic.obron.ide.oberon.Declararion;
import br.unb.cic.obron.ide.oberon.Declarations;
import br.unb.cic.obron.ide.oberon.Designator;
import br.unb.cic.obron.ide.oberon.Expression;
import br.unb.cic.obron.ide.oberon.FormalArg;
import br.unb.cic.obron.ide.oberon.Formals;
import br.unb.cic.obron.ide.oberon.Oberon;
import br.unb.cic.obron.ide.oberon.OberonFactory;
import br.unb.cic.obron.ide.oberon.OberonPackage;
import br.unb.cic.obron.ide.oberon.OberonType;
import br.unb.cic.obron.ide.oberon.Operation;
import br.unb.cic.obron.ide.oberon.Procedure;
import br.unb.cic.obron.ide.oberon.Statement;
import br.unb.cic.obron.ide.oberon.UserTypeDeclaration;
import br.unb.cic.obron.ide.oberon.VarDeclaration;
import br.unb.cic.obron.ide.oberon.caseAlternative;
import br.unb.cic.obron.ide.oberon.elseIfStmt;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OberonFactoryImpl extends EFactoryImpl implements OberonFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OberonFactory init()
  {
    try
    {
      OberonFactory theOberonFactory = (OberonFactory)EPackage.Registry.INSTANCE.getEFactory(OberonPackage.eNS_URI);
      if (theOberonFactory != null)
      {
        return theOberonFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OberonFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OberonFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OberonPackage.OBERON: return createOberon();
      case OberonPackage.BLOCK: return createBlock();
      case OberonPackage.DECLARATIONS: return createDeclarations();
      case OberonPackage.USER_TYPE_DECLARATION: return createUserTypeDeclaration();
      case OberonPackage.CONSTANT: return createConstant();
      case OberonPackage.VAR_DECLARATION: return createVarDeclaration();
      case OberonPackage.PROCEDURE: return createProcedure();
      case OberonPackage.FORMALS: return createFormals();
      case OberonPackage.FORMAL_ARG: return createFormalArg();
      case OberonPackage.ARGUMENTS: return createArguments();
      case OberonPackage.EXPRESSION: return createExpression();
      case OberonPackage.OPERATION: return createOperation();
      case OberonPackage.STATEMENT: return createStatement();
      case OberonPackage.DESIGNATOR: return createDesignator();
      case OberonPackage.CASE_ALTERNATIVE: return createcaseAlternative();
      case OberonPackage.ELSE_IF_STMT: return createelseIfStmt();
      case OberonPackage.OBERON_TYPE: return createOberonType();
      case OberonPackage.DECLARARION: return createDeclararion();
      case OberonPackage.INTEGER: return createInteger();
      case OberonPackage.BOOLEAN: return createBoolean();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Oberon createOberon()
  {
    OberonImpl oberon = new OberonImpl();
    return oberon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declarations createDeclarations()
  {
    DeclarationsImpl declarations = new DeclarationsImpl();
    return declarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UserTypeDeclaration createUserTypeDeclaration()
  {
    UserTypeDeclarationImpl userTypeDeclaration = new UserTypeDeclarationImpl();
    return userTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclaration createVarDeclaration()
  {
    VarDeclarationImpl varDeclaration = new VarDeclarationImpl();
    return varDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Procedure createProcedure()
  {
    ProcedureImpl procedure = new ProcedureImpl();
    return procedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formals createFormals()
  {
    FormalsImpl formals = new FormalsImpl();
    return formals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormalArg createFormalArg()
  {
    FormalArgImpl formalArg = new FormalArgImpl();
    return formalArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arguments createArguments()
  {
    ArgumentsImpl arguments = new ArgumentsImpl();
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Designator createDesignator()
  {
    DesignatorImpl designator = new DesignatorImpl();
    return designator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public caseAlternative createcaseAlternative()
  {
    caseAlternativeImpl caseAlternative = new caseAlternativeImpl();
    return caseAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public elseIfStmt createelseIfStmt()
  {
    elseIfStmtImpl elseIfStmt = new elseIfStmtImpl();
    return elseIfStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OberonType createOberonType()
  {
    OberonTypeImpl oberonType = new OberonTypeImpl();
    return oberonType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declararion createDeclararion()
  {
    DeclararionImpl declararion = new DeclararionImpl();
    return declararion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public br.unb.cic.obron.ide.oberon.Integer createInteger()
  {
    IntegerImpl integer = new IntegerImpl();
    return integer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public br.unb.cic.obron.ide.oberon.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OberonPackage getOberonPackage()
  {
    return (OberonPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OberonPackage getPackage()
  {
    return OberonPackage.eINSTANCE;
  }

} //OberonFactoryImpl

/**
 * generated by Xtext 2.25.0
 */
package br.unb.cic.obron.ide.oberon.impl;

import br.unb.cic.obron.ide.oberon.Designator;
import br.unb.cic.obron.ide.oberon.Expression;
import br.unb.cic.obron.ide.oberon.OberonPackage;
import br.unb.cic.obron.ide.oberon.Statement;
import br.unb.cic.obron.ide.oberon.caseAlternative;
import br.unb.cic.obron.ide.oberon.elseIfStmt;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getStmt <em>Stmt</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getStmts <em>Stmts</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getDes <em>Des</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getVar <em>Var</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getThenStmt <em>Then Stmt</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getElsifs <em>Elsifs</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getElseStmt <em>Else Stmt</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getInit <em>Init</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getMin <em>Min</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getMax <em>Max</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getCase <em>Case</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getCases <em>Cases</em>}</li>
 *   <li>{@link br.unb.cic.obron.ide.oberon.impl.StatementImpl#getExit <em>Exit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getStmt() <em>Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmt()
   * @generated
   * @ordered
   */
  protected Statement stmt;

  /**
   * The cached value of the '{@link #getStmts() <em>Stmts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmts()
   * @generated
   * @ordered
   */
  protected EList<Statement> stmts;

  /**
   * The cached value of the '{@link #getDes() <em>Des</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDes()
   * @generated
   * @ordered
   */
  protected Designator des;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The default value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected static final String VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected String var = VAR_EDEFAULT;

  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected Expression cond;

  /**
   * The cached value of the '{@link #getThenStmt() <em>Then Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThenStmt()
   * @generated
   * @ordered
   */
  protected Statement thenStmt;

  /**
   * The cached value of the '{@link #getElsifs() <em>Elsifs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElsifs()
   * @generated
   * @ordered
   */
  protected EList<elseIfStmt> elsifs;

  /**
   * The cached value of the '{@link #getElseStmt() <em>Else Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseStmt()
   * @generated
   * @ordered
   */
  protected Statement elseStmt;

  /**
   * The cached value of the '{@link #getInit() <em>Init</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInit()
   * @generated
   * @ordered
   */
  protected Statement init;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expression condition;

  /**
   * The cached value of the '{@link #getMin() <em>Min</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMin()
   * @generated
   * @ordered
   */
  protected Expression min;

  /**
   * The cached value of the '{@link #getMax() <em>Max</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected Expression max;

  /**
   * The cached value of the '{@link #getCase() <em>Case</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase()
   * @generated
   * @ordered
   */
  protected caseAlternative case_;

  /**
   * The cached value of the '{@link #getCases() <em>Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCases()
   * @generated
   * @ordered
   */
  protected EList<caseAlternative> cases;

  /**
   * The default value of the '{@link #getExit() <em>Exit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExit()
   * @generated
   * @ordered
   */
  protected static final String EXIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExit() <em>Exit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExit()
   * @generated
   * @ordered
   */
  protected String exit = EXIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OberonPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getStmt()
  {
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmt(Statement newStmt, NotificationChain msgs)
  {
    Statement oldStmt = stmt;
    stmt = newStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__STMT, oldStmt, newStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStmt(Statement newStmt)
  {
    if (newStmt != stmt)
    {
      NotificationChain msgs = null;
      if (stmt != null)
        msgs = ((InternalEObject)stmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__STMT, null, msgs);
      if (newStmt != null)
        msgs = ((InternalEObject)newStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__STMT, null, msgs);
      msgs = basicSetStmt(newStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__STMT, newStmt, newStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStmts()
  {
    if (stmts == null)
    {
      stmts = new EObjectContainmentEList<Statement>(Statement.class, this, OberonPackage.STATEMENT__STMTS);
    }
    return stmts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Designator getDes()
  {
    return des;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDes(Designator newDes, NotificationChain msgs)
  {
    Designator oldDes = des;
    des = newDes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__DES, oldDes, newDes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDes(Designator newDes)
  {
    if (newDes != des)
    {
      NotificationChain msgs = null;
      if (des != null)
        msgs = ((InternalEObject)des).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__DES, null, msgs);
      if (newDes != null)
        msgs = ((InternalEObject)newDes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__DES, null, msgs);
      msgs = basicSetDes(newDes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__DES, newDes, newDes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(String newVar)
  {
    String oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(Expression newCond, NotificationChain msgs)
  {
    Expression oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCond(Expression newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getThenStmt()
  {
    return thenStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThenStmt(Statement newThenStmt, NotificationChain msgs)
  {
    Statement oldThenStmt = thenStmt;
    thenStmt = newThenStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__THEN_STMT, oldThenStmt, newThenStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThenStmt(Statement newThenStmt)
  {
    if (newThenStmt != thenStmt)
    {
      NotificationChain msgs = null;
      if (thenStmt != null)
        msgs = ((InternalEObject)thenStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__THEN_STMT, null, msgs);
      if (newThenStmt != null)
        msgs = ((InternalEObject)newThenStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__THEN_STMT, null, msgs);
      msgs = basicSetThenStmt(newThenStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__THEN_STMT, newThenStmt, newThenStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<elseIfStmt> getElsifs()
  {
    if (elsifs == null)
    {
      elsifs = new EObjectContainmentEList<elseIfStmt>(elseIfStmt.class, this, OberonPackage.STATEMENT__ELSIFS);
    }
    return elsifs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getElseStmt()
  {
    return elseStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseStmt(Statement newElseStmt, NotificationChain msgs)
  {
    Statement oldElseStmt = elseStmt;
    elseStmt = newElseStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__ELSE_STMT, oldElseStmt, newElseStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElseStmt(Statement newElseStmt)
  {
    if (newElseStmt != elseStmt)
    {
      NotificationChain msgs = null;
      if (elseStmt != null)
        msgs = ((InternalEObject)elseStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__ELSE_STMT, null, msgs);
      if (newElseStmt != null)
        msgs = ((InternalEObject)newElseStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__ELSE_STMT, null, msgs);
      msgs = basicSetElseStmt(newElseStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__ELSE_STMT, newElseStmt, newElseStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getInit()
  {
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInit(Statement newInit, NotificationChain msgs)
  {
    Statement oldInit = init;
    init = newInit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__INIT, oldInit, newInit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInit(Statement newInit)
  {
    if (newInit != init)
    {
      NotificationChain msgs = null;
      if (init != null)
        msgs = ((InternalEObject)init).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__INIT, null, msgs);
      if (newInit != null)
        msgs = ((InternalEObject)newInit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__INIT, null, msgs);
      msgs = basicSetInit(newInit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__INIT, newInit, newInit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expression newCondition, NotificationChain msgs)
  {
    Expression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Expression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getMin()
  {
    return min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMin(Expression newMin, NotificationChain msgs)
  {
    Expression oldMin = min;
    min = newMin;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__MIN, oldMin, newMin);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMin(Expression newMin)
  {
    if (newMin != min)
    {
      NotificationChain msgs = null;
      if (min != null)
        msgs = ((InternalEObject)min).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__MIN, null, msgs);
      if (newMin != null)
        msgs = ((InternalEObject)newMin).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__MIN, null, msgs);
      msgs = basicSetMin(newMin, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__MIN, newMin, newMin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getMax()
  {
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMax(Expression newMax, NotificationChain msgs)
  {
    Expression oldMax = max;
    max = newMax;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__MAX, oldMax, newMax);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax(Expression newMax)
  {
    if (newMax != max)
    {
      NotificationChain msgs = null;
      if (max != null)
        msgs = ((InternalEObject)max).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__MAX, null, msgs);
      if (newMax != null)
        msgs = ((InternalEObject)newMax).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__MAX, null, msgs);
      msgs = basicSetMax(newMax, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__MAX, newMax, newMax));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public caseAlternative getCase()
  {
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCase(caseAlternative newCase, NotificationChain msgs)
  {
    caseAlternative oldCase = case_;
    case_ = newCase;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__CASE, oldCase, newCase);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCase(caseAlternative newCase)
  {
    if (newCase != case_)
    {
      NotificationChain msgs = null;
      if (case_ != null)
        msgs = ((InternalEObject)case_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__CASE, null, msgs);
      if (newCase != null)
        msgs = ((InternalEObject)newCase).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OberonPackage.STATEMENT__CASE, null, msgs);
      msgs = basicSetCase(newCase, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__CASE, newCase, newCase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<caseAlternative> getCases()
  {
    if (cases == null)
    {
      cases = new EObjectContainmentEList<caseAlternative>(caseAlternative.class, this, OberonPackage.STATEMENT__CASES);
    }
    return cases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExit()
  {
    return exit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExit(String newExit)
  {
    String oldExit = exit;
    exit = newExit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OberonPackage.STATEMENT__EXIT, oldExit, exit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OberonPackage.STATEMENT__STMT:
        return basicSetStmt(null, msgs);
      case OberonPackage.STATEMENT__STMTS:
        return ((InternalEList<?>)getStmts()).basicRemove(otherEnd, msgs);
      case OberonPackage.STATEMENT__DES:
        return basicSetDes(null, msgs);
      case OberonPackage.STATEMENT__EXP:
        return basicSetExp(null, msgs);
      case OberonPackage.STATEMENT__COND:
        return basicSetCond(null, msgs);
      case OberonPackage.STATEMENT__THEN_STMT:
        return basicSetThenStmt(null, msgs);
      case OberonPackage.STATEMENT__ELSIFS:
        return ((InternalEList<?>)getElsifs()).basicRemove(otherEnd, msgs);
      case OberonPackage.STATEMENT__ELSE_STMT:
        return basicSetElseStmt(null, msgs);
      case OberonPackage.STATEMENT__INIT:
        return basicSetInit(null, msgs);
      case OberonPackage.STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case OberonPackage.STATEMENT__MIN:
        return basicSetMin(null, msgs);
      case OberonPackage.STATEMENT__MAX:
        return basicSetMax(null, msgs);
      case OberonPackage.STATEMENT__CASE:
        return basicSetCase(null, msgs);
      case OberonPackage.STATEMENT__CASES:
        return ((InternalEList<?>)getCases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OberonPackage.STATEMENT__STMT:
        return getStmt();
      case OberonPackage.STATEMENT__STMTS:
        return getStmts();
      case OberonPackage.STATEMENT__DES:
        return getDes();
      case OberonPackage.STATEMENT__EXP:
        return getExp();
      case OberonPackage.STATEMENT__VAR:
        return getVar();
      case OberonPackage.STATEMENT__COND:
        return getCond();
      case OberonPackage.STATEMENT__THEN_STMT:
        return getThenStmt();
      case OberonPackage.STATEMENT__ELSIFS:
        return getElsifs();
      case OberonPackage.STATEMENT__ELSE_STMT:
        return getElseStmt();
      case OberonPackage.STATEMENT__INIT:
        return getInit();
      case OberonPackage.STATEMENT__CONDITION:
        return getCondition();
      case OberonPackage.STATEMENT__MIN:
        return getMin();
      case OberonPackage.STATEMENT__MAX:
        return getMax();
      case OberonPackage.STATEMENT__CASE:
        return getCase();
      case OberonPackage.STATEMENT__CASES:
        return getCases();
      case OberonPackage.STATEMENT__EXIT:
        return getExit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OberonPackage.STATEMENT__STMT:
        setStmt((Statement)newValue);
        return;
      case OberonPackage.STATEMENT__STMTS:
        getStmts().clear();
        getStmts().addAll((Collection<? extends Statement>)newValue);
        return;
      case OberonPackage.STATEMENT__DES:
        setDes((Designator)newValue);
        return;
      case OberonPackage.STATEMENT__EXP:
        setExp((Expression)newValue);
        return;
      case OberonPackage.STATEMENT__VAR:
        setVar((String)newValue);
        return;
      case OberonPackage.STATEMENT__COND:
        setCond((Expression)newValue);
        return;
      case OberonPackage.STATEMENT__THEN_STMT:
        setThenStmt((Statement)newValue);
        return;
      case OberonPackage.STATEMENT__ELSIFS:
        getElsifs().clear();
        getElsifs().addAll((Collection<? extends elseIfStmt>)newValue);
        return;
      case OberonPackage.STATEMENT__ELSE_STMT:
        setElseStmt((Statement)newValue);
        return;
      case OberonPackage.STATEMENT__INIT:
        setInit((Statement)newValue);
        return;
      case OberonPackage.STATEMENT__CONDITION:
        setCondition((Expression)newValue);
        return;
      case OberonPackage.STATEMENT__MIN:
        setMin((Expression)newValue);
        return;
      case OberonPackage.STATEMENT__MAX:
        setMax((Expression)newValue);
        return;
      case OberonPackage.STATEMENT__CASE:
        setCase((caseAlternative)newValue);
        return;
      case OberonPackage.STATEMENT__CASES:
        getCases().clear();
        getCases().addAll((Collection<? extends caseAlternative>)newValue);
        return;
      case OberonPackage.STATEMENT__EXIT:
        setExit((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OberonPackage.STATEMENT__STMT:
        setStmt((Statement)null);
        return;
      case OberonPackage.STATEMENT__STMTS:
        getStmts().clear();
        return;
      case OberonPackage.STATEMENT__DES:
        setDes((Designator)null);
        return;
      case OberonPackage.STATEMENT__EXP:
        setExp((Expression)null);
        return;
      case OberonPackage.STATEMENT__VAR:
        setVar(VAR_EDEFAULT);
        return;
      case OberonPackage.STATEMENT__COND:
        setCond((Expression)null);
        return;
      case OberonPackage.STATEMENT__THEN_STMT:
        setThenStmt((Statement)null);
        return;
      case OberonPackage.STATEMENT__ELSIFS:
        getElsifs().clear();
        return;
      case OberonPackage.STATEMENT__ELSE_STMT:
        setElseStmt((Statement)null);
        return;
      case OberonPackage.STATEMENT__INIT:
        setInit((Statement)null);
        return;
      case OberonPackage.STATEMENT__CONDITION:
        setCondition((Expression)null);
        return;
      case OberonPackage.STATEMENT__MIN:
        setMin((Expression)null);
        return;
      case OberonPackage.STATEMENT__MAX:
        setMax((Expression)null);
        return;
      case OberonPackage.STATEMENT__CASE:
        setCase((caseAlternative)null);
        return;
      case OberonPackage.STATEMENT__CASES:
        getCases().clear();
        return;
      case OberonPackage.STATEMENT__EXIT:
        setExit(EXIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OberonPackage.STATEMENT__STMT:
        return stmt != null;
      case OberonPackage.STATEMENT__STMTS:
        return stmts != null && !stmts.isEmpty();
      case OberonPackage.STATEMENT__DES:
        return des != null;
      case OberonPackage.STATEMENT__EXP:
        return exp != null;
      case OberonPackage.STATEMENT__VAR:
        return VAR_EDEFAULT == null ? var != null : !VAR_EDEFAULT.equals(var);
      case OberonPackage.STATEMENT__COND:
        return cond != null;
      case OberonPackage.STATEMENT__THEN_STMT:
        return thenStmt != null;
      case OberonPackage.STATEMENT__ELSIFS:
        return elsifs != null && !elsifs.isEmpty();
      case OberonPackage.STATEMENT__ELSE_STMT:
        return elseStmt != null;
      case OberonPackage.STATEMENT__INIT:
        return init != null;
      case OberonPackage.STATEMENT__CONDITION:
        return condition != null;
      case OberonPackage.STATEMENT__MIN:
        return min != null;
      case OberonPackage.STATEMENT__MAX:
        return max != null;
      case OberonPackage.STATEMENT__CASE:
        return case_ != null;
      case OberonPackage.STATEMENT__CASES:
        return cases != null && !cases.isEmpty();
      case OberonPackage.STATEMENT__EXIT:
        return EXIT_EDEFAULT == null ? exit != null : !EXIT_EDEFAULT.equals(exit);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (var: ");
    result.append(var);
    result.append(", exit: ");
    result.append(exit);
    result.append(')');
    return result.toString();
  }

} //StatementImpl

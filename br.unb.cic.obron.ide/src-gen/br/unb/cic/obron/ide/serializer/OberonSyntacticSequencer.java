/*
 * generated by Xtext 2.25.0
 */
package br.unb.cic.obron.ide.serializer;

import br.unb.cic.obron.ide.services.OberonGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class OberonSyntacticSequencer extends AbstractSyntacticSequencer {

	protected OberonGrammarAccess grammarAccess;
	protected AbstractElementAlias match_TDesignator___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_TExpression___LeftParenthesisKeyword_3_1_0_RightParenthesisKeyword_3_1_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (OberonGrammarAccess) access;
		match_TDesignator___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTDesignatorAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTDesignatorAccess().getRightParenthesisKeyword_1_2()));
		match_TExpression___LeftParenthesisKeyword_3_1_0_RightParenthesisKeyword_3_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTExpressionAccess().getLeftParenthesisKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getTExpressionAccess().getRightParenthesisKeyword_3_1_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_TDesignator___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_TDesignator___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TExpression___LeftParenthesisKeyword_3_1_0_RightParenthesisKeyword_3_1_2__q.equals(syntax))
				emit_TExpression___LeftParenthesisKeyword_3_1_0_RightParenthesisKeyword_3_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_TDesignator___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '.' atribs+=ID
	 *     name=ID (ambiguity) '[' index+=Expression
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_TExpression___LeftParenthesisKeyword_3_1_0_RightParenthesisKeyword_3_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
